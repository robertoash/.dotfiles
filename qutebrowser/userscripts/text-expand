#!/usr/bin/env python3
"""
qutebrowser text expansion userscript
Save as: ~/.config/qutebrowser/userscripts/text-expand
Usage: :spawn --userscript text-expand :@@
       :spawn --userscript text-expand (for interactive menu)
Requires: wl-clipboard (for Wayland) or xclip (for X11)
"""

import os
import sys
import subprocess

# Text expansions dictionary
EXPANSIONS = {
    ":@@": "j.roberto.ash@gmail.com",
    ":phone": "+46764152336",
    ":date": None,  # Will be filled with current date
    ":time": None,  # Will be filled with current time
}

def get_current_date():
    """Get current date in YYYY-MM-DD format"""
    from datetime import datetime
    return datetime.now().strftime("%Y-%m-%d")

def get_current_time():
    """Get current time in HH:MM format"""
    from datetime import datetime
    return datetime.now().strftime("%H:%M")

def is_wayland():
    """Check if running on Wayland"""
    return os.environ.get('WAYLAND_DISPLAY') is not None

def copy_to_clipboard(text):
    """Copy text to clipboard (Wayland or X11)"""
    try:
        if is_wayland():
            subprocess.run(['wl-copy'], input=text, text=True, check=True)
        else:
            subprocess.run(['xclip', '-selection', 'clipboard'], 
                         input=text, text=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        print(f"Clipboard error: {e}", file=sys.stderr)
        return False

def send_qute_command(command):
    """Send command to qutebrowser via FIFO"""
    fifo_path = os.environ.get('QUTE_FIFO')
    if not fifo_path:
        print("Error: QUTE_FIFO not set", file=sys.stderr)
        return False
    
    try:
        with open(fifo_path, 'w') as fifo:
            fifo.write(command + '\n')
        return True
    except Exception as e:
        print(f"FIFO error: {e}", file=sys.stderr)
        return False

def show_menu():
    """Show interactive menu using rofi or dmenu"""
    options = list(EXPANSIONS.keys())
    menu_input = '\n'.join(options)
    
    # Try rofi first, then dmenu
    for cmd in [['rofi', '-dmenu', '-p', 'Text Expansion:'], 
                ['dmenu', '-p', 'Text Expansion:']]:
        try:
            result = subprocess.run(cmd, input=menu_input, text=True, 
                                  capture_output=True, check=True)
            return result.stdout.strip()
        except (subprocess.CalledProcessError, FileNotFoundError):
            continue
    
    # Fallback: just return first option
    send_qute_command('message-warning "No menu program found (rofi/dmenu)"')
    return options[0] if options else None

def expand_text(trigger):
    """Expand the trigger text"""
    # Handle dynamic expansions
    if trigger == ":date":
        replacement = get_current_date()
    elif trigger == ":time":
        replacement = get_current_time()
    else:
        replacement = EXPANSIONS.get(trigger)
    
    if replacement is None:
        send_qute_command(f'message-info "Unknown trigger: {trigger}"')
        return False
    
    # Copy to clipboard and paste
    if copy_to_clipboard(replacement):
        send_qute_command('fake-key <Ctrl-v>')
        send_qute_command(f'message-info "Expanded: {trigger}"')
        return True
    else:
        # Fallback: use insert-text (less reliable but works)
        # Escape quotes and newlines for qutebrowser
        escaped = replacement.replace('"', '\\"').replace('\n', '\\n')
        send_qute_command(f'insert-text "{escaped}"')
        send_qute_command(f'message-info "Expanded: {trigger} (fallback)"')
        return True

def main():
    """Main function"""
    if len(sys.argv) > 1:
        # Direct trigger mode
        trigger = sys.argv[1]
    else:
        # Interactive menu mode
        trigger = show_menu()
        if not trigger:
            send_qute_command('message-info "No expansion selected"')
            return
    
    expand_text(trigger)

if __name__ == "__main__":
    main()
